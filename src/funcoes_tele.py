# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'funcoes_tele.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from bd import bd
import vglobal
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtWidgets import QApplication, QWidget, QTableWidget, QTableWidgetItem,QCheckBox, QMessageBox,QTreeWidget, QTreeWidgetItem
from PyQt5.QtGui import QColor, QBrush


class Ui_Form_funcoes_tele(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.setWindowModality(QtCore.Qt.WindowModal)
        Form.resize(700, 544)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Form.sizePolicy().hasHeightForWidth())
        Form.setSizePolicy(sizePolicy)
        Form.setMinimumSize(QtCore.QSize(0, 0))
        Form.setMaximumSize(QtCore.QSize(16777215, 16777215))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/soui/sou.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Form.setWindowIcon(icon)
        Form.setStyleSheet("QWidget#Form{\n"
"background-image: url(:/fundo/fundo.png);}\n"
"")
        self.verticalLayout = QtWidgets.QVBoxLayout(Form)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame = QtWidgets.QFrame(Form)
        self.frame.setStyleSheet("QFrame#frame{\n"
"    background-color: rgb(255, 255, 255);\n"
"border-radius: 10px;\n"
"}")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setMinimumSize(QtCore.QSize(0, 100))
        self.frame_2.setMaximumSize(QtCore.QSize(160000, 100))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.frame_4 = QtWidgets.QFrame(self.frame_2)
        self.frame_4.setGeometry(QtCore.QRect(19, 10, 631, 80))
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.groupBox = QtWidgets.QGroupBox(self.frame_4)
        self.groupBox.setGeometry(QtCore.QRect(10, 0, 611, 81))
        self.groupBox.setTitle("")
        self.groupBox.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox.setObjectName("groupBox")
        self.c_env = QtWidgets.QCheckBox(self.groupBox)
        self.c_env.setGeometry(QtCore.QRect(500, 53, 102, 20))
        self.c_env.setObjectName("c_env")
        self.c_somente_ativ = QtWidgets.QCheckBox(self.groupBox)
        self.c_somente_ativ.setGeometry(QtCore.QRect(500, 34, 102, 20))
        self.c_somente_ativ.setObjectName("c_somente_ativ")
        self.c_somente_prod = QtWidgets.QCheckBox(self.groupBox)
        self.c_somente_prod.setGeometry(QtCore.QRect(500, 15, 102, 20))
        self.c_somente_prod.setChecked(True)
        self.c_somente_prod.setObjectName("c_somente_prod")
        self.widget = QtWidgets.QWidget(self.groupBox)
        self.widget.setGeometry(QtCore.QRect(17, 14, 141, 46))
        self.widget.setObjectName("widget")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.widget)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setHorizontalSpacing(10)
        self.gridLayout_3.setVerticalSpacing(0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setObjectName("label")
        self.gridLayout_3.addWidget(self.label, 0, 0, 1, 1)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setHorizontalSpacing(6)
        self.gridLayout.setObjectName("gridLayout")
        self.comb_bot = QtWidgets.QComboBox(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comb_bot.sizePolicy().hasHeightForWidth())
        self.comb_bot.setSizePolicy(sizePolicy)
        self.comb_bot.setMinimumSize(QtCore.QSize(160, 0))
        self.comb_bot.setObjectName("comb_bot")
        self.comb_bot.addItem("")
        self.gridLayout.addWidget(self.comb_bot, 0, 0, 1, 1)
        self.bt_pesquisar = QtWidgets.QPushButton(self.widget)
        self.bt_pesquisar.setMaximumSize(QtCore.QSize(25, 25))
        self.bt_pesquisar.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/buscar/buscar.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_pesquisar.setIcon(icon1)
        self.bt_pesquisar.setIconSize(QtCore.QSize(15, 15))
        self.bt_pesquisar.setObjectName("bt_pesquisar")
        self.gridLayout.addWidget(self.bt_pesquisar, 0, 1, 1, 1)
        self.gridLayout_3.addLayout(self.gridLayout, 1, 0, 1, 1)
        self.widget1 = QtWidgets.QWidget(self.groupBox)
        self.widget1.setGeometry(QtCore.QRect(172, 14, 121, 46))
        self.widget1.setObjectName("widget1")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.widget1)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setVerticalSpacing(0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_2 = QtWidgets.QLabel(self.widget1)
        self.label_2.setMaximumSize(QtCore.QSize(100, 16777215))
        self.label_2.setObjectName("label_2")
        self.gridLayout_2.addWidget(self.label_2, 0, 0, 1, 1)
        self.line_gatilho = QtWidgets.QLineEdit(self.widget1)
        self.line_gatilho.setMaximumSize(QtCore.QSize(150, 16777215))
        self.line_gatilho.setObjectName("line_gatilho")
        self.gridLayout_2.addWidget(self.line_gatilho, 1, 0, 1, 1)
        self.verticalLayout_2.addWidget(self.frame_2)
        self.frame_3 = QtWidgets.QFrame(self.frame)
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_3)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.treeWidget = QtWidgets.QTreeWidget(self.frame_3)
        self.treeWidget.setAlternatingRowColors(True)
        self.treeWidget.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.treeWidget.setObjectName("treeWidget")
        self.verticalLayout_3.addWidget(self.treeWidget)
        self.verticalLayout_2.addWidget(self.frame_3)
        self.frame_5 = QtWidgets.QFrame(self.frame)
        self.frame_5.setMinimumSize(QtCore.QSize(0, 30))
        self.frame_5.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_5)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.frame_5)
        self.lineEdit_2.setEnabled(False)
        self.lineEdit_2.setFrame(False)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalLayout.addWidget(self.lineEdit_2)
        self.gridLayout_4 = QtWidgets.QGridLayout()
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.nt_cadastrar = QtWidgets.QPushButton(self.frame_5)
        self.nt_cadastrar.setMinimumSize(QtCore.QSize(20, 0))
        self.nt_cadastrar.setObjectName("nt_cadastrar")
        self.gridLayout_4.addWidget(self.nt_cadastrar, 0, 0, 1, 1)
        self.Editar = QtWidgets.QPushButton(self.frame_5)
        self.Editar.setMinimumSize(QtCore.QSize(20, 0))
        self.Editar.setObjectName("Editar")
        self.gridLayout_4.addWidget(self.Editar, 0, 1, 1, 1)
        self.horizontalLayout.addLayout(self.gridLayout_4)
        self.horizontalLayout_2.addLayout(self.horizontalLayout)
        self.verticalLayout_2.addWidget(self.frame_5)
        self.verticalLayout.addWidget(self.frame)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Funções Tele"))
        self.c_env.setText(_translate("Form", "Env. Excel"))
        self.c_somente_ativ.setText(_translate("Form", "Somente Ativos."))
        self.c_somente_prod.setText(_translate("Form", "Somente Prod."))
        self.label.setText(_translate("Form", "Bot"))
        self.comb_bot.setCurrentText(_translate("Form", "Todos"))
        self.comb_bot.setItemText(0, _translate("Form", "Todos"))
        self.label_2.setText(_translate("Form", "Gatilho"))
        self.line_gatilho.setPlaceholderText(_translate("Form", "ped-dia"))
        self.treeWidget.headerItem().setText(0, _translate("Form", "id"))
        self.treeWidget.headerItem().setText(1, _translate("Form", "Nome"))
        self.treeWidget.headerItem().setText(2, _translate("Form", "Prod"))
        self.nt_cadastrar.setText(_translate("Form", "Cadastrar"))
        self.Editar.setText(_translate("Form", "Editar"))
        self.bt_pesquisar.clicked.connect(self.buscar_func)
        self.carregar_tree()
        try:
            con = bd.conexao.conectarbot()
            cursor = con.cursor()
            sql = "select id_bot,nome,prod from botsparam"
            cursor.execute(sql)
            resultado = cursor.fetchall()
            for row in resultado:
                 self.comb_bot.addItem(row[1])
        except Exception as E:
                      self.pop_up = QMessageBox()
                      self.pop_up.setWindowTitle("ERRO")
                      self.pop_up.setText(f"Erro ao cadastrar usuário\n{str(E)}")
                      self.pop_up.exec()
        finally:
                      cursor.close()
                      con.close()
    def carregar_tree(self):
        try:
            con = bd.conexao.conectarbot()
            cursor = con.cursor()
            sql = "select id_bot,nome,prod from botsparam"
            cursor.execute(sql)
            resultado = cursor.fetchall()
            for row in resultado:
              item = QTreeWidgetItem(self.treeWidget)
              item.setText(0, str(row[0]))
              item.setText(1, row[1])
              item.setText(2, row[2])

              cursor.execute(f"SELECT id_func, descricao,caption FROM funcoes WHERE id_bot={int(str(row[0]))}")
              filho = cursor.fetchall()
              if len(filho) > 0:
                cabecalho_item = QTreeWidgetItem(item)
                cabecalho_item.setText(0, "ID")
                cabecalho_item.setText(1, "desc")
                cabecalho_item.setText(2, "caption")
                for column in range(self.treeWidget.columnCount()):
                  cabecalho_item.setBackground(column, QBrush(QColor(213, 213, 213)))
                self.add_children(item, row[0])

                   
                    
        finally:
            cursor.close()
            con.close()
    def buscar_func(self):
        self.treeWidget.clear()
        vnome_func = self.line_gatilho.text()
        bot_selecionado = self.comb_bot.currentText()
        if vnome_func != '' or bot_selecionado != 'Todos':
                  if  bot_selecionado == 'Todos':
                       bot_selecionado = ''
                  try:
                      con = bd.conexao.conectarbot()
                      cursor = con.cursor()
                      cursor.execute(f"SELECT id_bot FROM funcoes WHERE descricao like '%{vnome_func}%' group by id_bot")
                      filho = cursor.fetchall()
                      print("aqui 1")
                      print(filho)
                      for id_bot in filho:
                         sql_func = f"select id_bot,nome,prod from botsparam where id_bot = {id_bot[0]} and nome like '%{bot_selecionado}%'"
                         cursor.execute(sql_func)
                         resultadofunc = cursor.fetchall()
                         for row in resultadofunc:
                           item = QTreeWidgetItem(self.treeWidget)
                           item.setText(0, str(row[0]))
                           item.setText(1, row[1])
                           item.setText(2, row[2])
                           print("aqui 2")
                           print(str(row[0]))
                           cursor.execute(f"SELECT id_func, descricao,descricao FROM funcoes WHERE id_bot={int(str(row[0]))} and descricao like '%{vnome_func}%'")
                           filho = cursor.fetchall()
                           if len(filho) > 0:
                             cabecalho_item = QTreeWidgetItem(item)
                             cabecalho_item.setText(0, "ID")
                             cabecalho_item.setText(1, "desc")
                             cabecalho_item.setText(2, "caption")
                             for column in range(self.treeWidget.columnCount()):
                               cabecalho_item.setBackground(column, QBrush(QColor(213, 213, 213)))
                             cursor.execute(f"SELECT id_func, descricao,caption FROM funcoes  WHERE id_bot={int(str(row[0]))} and descricao like '%{vnome_func}%'")
                             filho = cursor.fetchall()
                     
                             # Adicionar filhos ao item pai
                             for child in filho:
                                 filho_item = QTreeWidgetItem(item)
                                 filho_item.setText(0, str(child[0]))
                                 filho_item.setText(1, child[1])
                                 filho_item.setText(2, child[2])
                 
                         
                  except Exception as E:
                      self.pop_up = QMessageBox()
                      self.pop_up.setWindowTitle("ERRO")
                      self.pop_up.setText(f"Erro ao cadastrar usuário\n{str(E)}")
                      self.pop_up.exec()
                  finally:
                      cursor.close()
                      con.close()
        else:
              self.carregar_tree()
    def add_children(self, item, id_bot):
        try:
            con = bd.conexao.conectarbot()
            cursor = con.cursor()
            cursor.execute("SELECT id_func, descricao,caption FROM funcoes WHERE id_bot=?", (id_bot,))
            filho = cursor.fetchall()
    
            # Adicionar filhos ao item pai
            for child in filho:
                filho_item = QTreeWidgetItem(item)
                filho_item.setText(0, str(child[0]))
                filho_item.setText(1, child[1])
                filho_item.setText(2, child[2])
        except Exception as E:
            self.pop_up = QMessageBox()
            self.pop_up.setWindowTitle("ERRO")
            self.pop_up.setText(f"Erro ao cadastrar usuário\n{str(E)}")
            self.pop_up.exec()
        finally:
            cursor.close()
            con.close()


import icons.buscar
import IMAGENS_DEV_ENERGY.fundo
import IMAGENS_DEV_ENERGY.soui

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form_funcoes_tele()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
